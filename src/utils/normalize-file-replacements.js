"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeFileReplacements = exports.MissingFileReplacementException = void 0;
const core_1 = require("@angular-devkit/core");
const fs_1 = require("fs");
class MissingFileReplacementException extends core_1.BaseException {
    constructor(path) {
        super(`The ${path} path in file replacements does not exist.`);
    }
}
exports.MissingFileReplacementException = MissingFileReplacementException;
function normalizeFileReplacements(fileReplacements, root) {
    if (fileReplacements.length === 0) {
        return [];
    }
    const normalizedReplacement = fileReplacements.map((replacement) => normalizeFileReplacement(replacement, root));
    for (const { replace, with: replacementWith } of normalizedReplacement) {
        if (!(0, fs_1.existsSync)((0, core_1.getSystemPath)(replacementWith))) {
            throw new MissingFileReplacementException((0, core_1.getSystemPath)(replacementWith));
        }
        if (!(0, fs_1.existsSync)((0, core_1.getSystemPath)(replace))) {
            throw new MissingFileReplacementException((0, core_1.getSystemPath)(replace));
        }
    }
    return normalizedReplacement;
}
exports.normalizeFileReplacements = normalizeFileReplacements;
function normalizeFileReplacement(fileReplacement, root) {
    let replacePath;
    let withPath;
    if (fileReplacement.src && fileReplacement.replaceWith) {
        replacePath = (0, core_1.normalize)(fileReplacement.src);
        withPath = (0, core_1.normalize)(fileReplacement.replaceWith);
    }
    else if (fileReplacement.replace && fileReplacement.with) {
        replacePath = (0, core_1.normalize)(fileReplacement.replace);
        withPath = (0, core_1.normalize)(fileReplacement.with);
    }
    else {
        throw new Error(`Invalid file replacement: ${JSON.stringify(fileReplacement)}`);
    }
    // TODO: For 7.x should this only happen if not absolute?
    if (root) {
        replacePath = (0, core_1.join)(root, replacePath);
    }
    if (root) {
        withPath = (0, core_1.join)(root, withPath);
    }
    return { replace: replacePath, with: withPath };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFsaXplLWZpbGUtcmVwbGFjZW1lbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhcl9kZXZraXQvYnVpbGRfYW5ndWxhci9zcmMvdXRpbHMvbm9ybWFsaXplLWZpbGUtcmVwbGFjZW1lbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7OztBQUVILCtDQUEyRjtBQUMzRiwyQkFBZ0M7QUFHaEMsTUFBYSwrQkFBZ0MsU0FBUSxvQkFBYTtJQUNoRSxZQUFZLElBQVk7UUFDdEIsS0FBSyxDQUFDLE9BQU8sSUFBSSw0Q0FBNEMsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Q0FDRjtBQUpELDBFQUlDO0FBT0QsU0FBZ0IseUJBQXlCLENBQ3ZDLGdCQUFtQyxFQUNuQyxJQUFVO0lBRVYsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ2pDLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFFRCxNQUFNLHFCQUFxQixHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQ2pFLHdCQUF3QixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FDNUMsQ0FBQztJQUVGLEtBQUssTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLElBQUkscUJBQXFCLEVBQUU7UUFDdEUsSUFBSSxDQUFDLElBQUEsZUFBVSxFQUFDLElBQUEsb0JBQWEsRUFBQyxlQUFlLENBQUMsQ0FBQyxFQUFFO1lBQy9DLE1BQU0sSUFBSSwrQkFBK0IsQ0FBQyxJQUFBLG9CQUFhLEVBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztTQUMzRTtRQUVELElBQUksQ0FBQyxJQUFBLGVBQVUsRUFBQyxJQUFBLG9CQUFhLEVBQUMsT0FBTyxDQUFDLENBQUMsRUFBRTtZQUN2QyxNQUFNLElBQUksK0JBQStCLENBQUMsSUFBQSxvQkFBYSxFQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDbkU7S0FDRjtJQUVELE9BQU8scUJBQXFCLENBQUM7QUFDL0IsQ0FBQztBQXZCRCw4REF1QkM7QUFFRCxTQUFTLHdCQUF3QixDQUMvQixlQUFnQyxFQUNoQyxJQUFXO0lBRVgsSUFBSSxXQUFpQixDQUFDO0lBQ3RCLElBQUksUUFBYyxDQUFDO0lBQ25CLElBQUksZUFBZSxDQUFDLEdBQUcsSUFBSSxlQUFlLENBQUMsV0FBVyxFQUFFO1FBQ3RELFdBQVcsR0FBRyxJQUFBLGdCQUFTLEVBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdDLFFBQVEsR0FBRyxJQUFBLGdCQUFTLEVBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQ25EO1NBQU0sSUFBSSxlQUFlLENBQUMsT0FBTyxJQUFJLGVBQWUsQ0FBQyxJQUFJLEVBQUU7UUFDMUQsV0FBVyxHQUFHLElBQUEsZ0JBQVMsRUFBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakQsUUFBUSxHQUFHLElBQUEsZ0JBQVMsRUFBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDNUM7U0FBTTtRQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ2pGO0lBRUQseURBQXlEO0lBQ3pELElBQUksSUFBSSxFQUFFO1FBQ1IsV0FBVyxHQUFHLElBQUEsV0FBSSxFQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztLQUN2QztJQUNELElBQUksSUFBSSxFQUFFO1FBQ1IsUUFBUSxHQUFHLElBQUEsV0FBSSxFQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztLQUNqQztJQUVELE9BQU8sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQztBQUNsRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IEJhc2VFeGNlcHRpb24sIFBhdGgsIGdldFN5c3RlbVBhdGgsIGpvaW4sIG5vcm1hbGl6ZSB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcbmltcG9ydCB7IGV4aXN0c1N5bmMgfSBmcm9tICdmcyc7XG5pbXBvcnQgeyBGaWxlUmVwbGFjZW1lbnQgfSBmcm9tICcuLi9idWlsZGVycy9icm93c2VyL3NjaGVtYSc7XG5cbmV4cG9ydCBjbGFzcyBNaXNzaW5nRmlsZVJlcGxhY2VtZW50RXhjZXB0aW9uIGV4dGVuZHMgQmFzZUV4Y2VwdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHBhdGg6IFN0cmluZykge1xuICAgIHN1cGVyKGBUaGUgJHtwYXRofSBwYXRoIGluIGZpbGUgcmVwbGFjZW1lbnRzIGRvZXMgbm90IGV4aXN0LmApO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTm9ybWFsaXplZEZpbGVSZXBsYWNlbWVudCB7XG4gIHJlcGxhY2U6IFBhdGg7XG4gIHdpdGg6IFBhdGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVGaWxlUmVwbGFjZW1lbnRzKFxuICBmaWxlUmVwbGFjZW1lbnRzOiBGaWxlUmVwbGFjZW1lbnRbXSxcbiAgcm9vdDogUGF0aCxcbik6IE5vcm1hbGl6ZWRGaWxlUmVwbGFjZW1lbnRbXSB7XG4gIGlmIChmaWxlUmVwbGFjZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IG5vcm1hbGl6ZWRSZXBsYWNlbWVudCA9IGZpbGVSZXBsYWNlbWVudHMubWFwKChyZXBsYWNlbWVudCkgPT5cbiAgICBub3JtYWxpemVGaWxlUmVwbGFjZW1lbnQocmVwbGFjZW1lbnQsIHJvb3QpLFxuICApO1xuXG4gIGZvciAoY29uc3QgeyByZXBsYWNlLCB3aXRoOiByZXBsYWNlbWVudFdpdGggfSBvZiBub3JtYWxpemVkUmVwbGFjZW1lbnQpIHtcbiAgICBpZiAoIWV4aXN0c1N5bmMoZ2V0U3lzdGVtUGF0aChyZXBsYWNlbWVudFdpdGgpKSkge1xuICAgICAgdGhyb3cgbmV3IE1pc3NpbmdGaWxlUmVwbGFjZW1lbnRFeGNlcHRpb24oZ2V0U3lzdGVtUGF0aChyZXBsYWNlbWVudFdpdGgpKTtcbiAgICB9XG5cbiAgICBpZiAoIWV4aXN0c1N5bmMoZ2V0U3lzdGVtUGF0aChyZXBsYWNlKSkpIHtcbiAgICAgIHRocm93IG5ldyBNaXNzaW5nRmlsZVJlcGxhY2VtZW50RXhjZXB0aW9uKGdldFN5c3RlbVBhdGgocmVwbGFjZSkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBub3JtYWxpemVkUmVwbGFjZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUZpbGVSZXBsYWNlbWVudChcbiAgZmlsZVJlcGxhY2VtZW50OiBGaWxlUmVwbGFjZW1lbnQsXG4gIHJvb3Q/OiBQYXRoLFxuKTogTm9ybWFsaXplZEZpbGVSZXBsYWNlbWVudCB7XG4gIGxldCByZXBsYWNlUGF0aDogUGF0aDtcbiAgbGV0IHdpdGhQYXRoOiBQYXRoO1xuICBpZiAoZmlsZVJlcGxhY2VtZW50LnNyYyAmJiBmaWxlUmVwbGFjZW1lbnQucmVwbGFjZVdpdGgpIHtcbiAgICByZXBsYWNlUGF0aCA9IG5vcm1hbGl6ZShmaWxlUmVwbGFjZW1lbnQuc3JjKTtcbiAgICB3aXRoUGF0aCA9IG5vcm1hbGl6ZShmaWxlUmVwbGFjZW1lbnQucmVwbGFjZVdpdGgpO1xuICB9IGVsc2UgaWYgKGZpbGVSZXBsYWNlbWVudC5yZXBsYWNlICYmIGZpbGVSZXBsYWNlbWVudC53aXRoKSB7XG4gICAgcmVwbGFjZVBhdGggPSBub3JtYWxpemUoZmlsZVJlcGxhY2VtZW50LnJlcGxhY2UpO1xuICAgIHdpdGhQYXRoID0gbm9ybWFsaXplKGZpbGVSZXBsYWNlbWVudC53aXRoKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZmlsZSByZXBsYWNlbWVudDogJHtKU09OLnN0cmluZ2lmeShmaWxlUmVwbGFjZW1lbnQpfWApO1xuICB9XG5cbiAgLy8gVE9ETzogRm9yIDcueCBzaG91bGQgdGhpcyBvbmx5IGhhcHBlbiBpZiBub3QgYWJzb2x1dGU/XG4gIGlmIChyb290KSB7XG4gICAgcmVwbGFjZVBhdGggPSBqb2luKHJvb3QsIHJlcGxhY2VQYXRoKTtcbiAgfVxuICBpZiAocm9vdCkge1xuICAgIHdpdGhQYXRoID0gam9pbihyb290LCB3aXRoUGF0aCk7XG4gIH1cblxuICByZXR1cm4geyByZXBsYWNlOiByZXBsYWNlUGF0aCwgd2l0aDogd2l0aFBhdGggfTtcbn1cbiJdfQ==