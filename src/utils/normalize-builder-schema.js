"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeBrowserSchema = void 0;
const normalize_asset_patterns_1 = require("./normalize-asset-patterns");
const normalize_cache_1 = require("./normalize-cache");
const normalize_file_replacements_1 = require("./normalize-file-replacements");
const normalize_optimization_1 = require("./normalize-optimization");
const normalize_source_maps_1 = require("./normalize-source-maps");
const supported_browsers_1 = require("./supported-browsers");
function normalizeBrowserSchema(workspaceRoot, projectRoot, projectSourceRoot, options, metadata, logger) {
    const normalizedSourceMapOptions = (0, normalize_source_maps_1.normalizeSourceMaps)(options.sourceMap || false);
    return {
        ...options,
        cache: (0, normalize_cache_1.normalizeCacheOptions)(metadata, workspaceRoot),
        assets: (0, normalize_asset_patterns_1.normalizeAssetPatterns)(options.assets || [], workspaceRoot, projectRoot, projectSourceRoot),
        fileReplacements: (0, normalize_file_replacements_1.normalizeFileReplacements)(options.fileReplacements || [], workspaceRoot),
        optimization: (0, normalize_optimization_1.normalizeOptimization)(options.optimization),
        sourceMap: normalizedSourceMapOptions,
        preserveSymlinks: options.preserveSymlinks === undefined
            ? process.execArgv.includes('--preserve-symlinks')
            : options.preserveSymlinks,
        statsJson: options.statsJson || false,
        budgets: options.budgets || [],
        scripts: options.scripts || [],
        styles: options.styles || [],
        stylePreprocessorOptions: {
            includePaths: (options.stylePreprocessorOptions && options.stylePreprocessorOptions.includePaths) || [],
        },
        // Using just `--poll` will result in a value of 0 which is very likely not the intention
        // A value of 0 is falsy and will disable polling rather then enable
        // 500 ms is a sensible default in this case
        poll: options.poll === 0 ? 500 : options.poll,
        supportedBrowsers: (0, supported_browsers_1.getSupportedBrowsers)(projectRoot, logger),
    };
}
exports.normalizeBrowserSchema = normalizeBrowserSchema;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFsaXplLWJ1aWxkZXItc2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhcl9kZXZraXQvYnVpbGRfYW5ndWxhci9zcmMvdXRpbHMvbm9ybWFsaXplLWJ1aWxkZXItc2NoZW1hLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7OztBQVNILHlFQUFvRTtBQUNwRSx1REFBMEQ7QUFDMUQsK0VBR3VDO0FBQ3ZDLHFFQUFnRztBQUNoRyxtRUFBOEQ7QUFDOUQsNkRBQTREO0FBYTVELFNBQWdCLHNCQUFzQixDQUNwQyxhQUFxQixFQUNyQixXQUFtQixFQUNuQixpQkFBcUMsRUFDckMsT0FBNkIsRUFDN0IsUUFBeUIsRUFDekIsTUFBeUI7SUFFekIsTUFBTSwwQkFBMEIsR0FBRyxJQUFBLDJDQUFtQixFQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksS0FBSyxDQUFDLENBQUM7SUFFbkYsT0FBTztRQUNMLEdBQUcsT0FBTztRQUNWLEtBQUssRUFBRSxJQUFBLHVDQUFxQixFQUFDLFFBQVEsRUFBRSxhQUFhLENBQUM7UUFDckQsTUFBTSxFQUFFLElBQUEsaURBQXNCLEVBQzVCLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxFQUNwQixhQUFhLEVBQ2IsV0FBVyxFQUNYLGlCQUFpQixDQUNsQjtRQUNELGdCQUFnQixFQUFFLElBQUEsdURBQXlCLEVBQUMsT0FBTyxDQUFDLGdCQUFnQixJQUFJLEVBQUUsRUFBRSxhQUFhLENBQUM7UUFDMUYsWUFBWSxFQUFFLElBQUEsOENBQXFCLEVBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztRQUN6RCxTQUFTLEVBQUUsMEJBQTBCO1FBQ3JDLGdCQUFnQixFQUNkLE9BQU8sQ0FBQyxnQkFBZ0IsS0FBSyxTQUFTO1lBQ3BDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQztZQUNsRCxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQjtRQUM5QixTQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVMsSUFBSSxLQUFLO1FBQ3JDLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxJQUFJLEVBQUU7UUFDOUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLElBQUksRUFBRTtRQUM5QixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sSUFBSSxFQUFFO1FBQzVCLHdCQUF3QixFQUFFO1lBQ3hCLFlBQVksRUFDVixDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsSUFBSSxPQUFPLENBQUMsd0JBQXdCLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRTtTQUM1RjtRQUNELHlGQUF5RjtRQUN6RixvRUFBb0U7UUFDcEUsNENBQTRDO1FBQzVDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSTtRQUM3QyxpQkFBaUIsRUFBRSxJQUFBLHlDQUFvQixFQUFDLFdBQVcsRUFBRSxNQUFNLENBQUM7S0FDN0QsQ0FBQztBQUNKLENBQUM7QUF4Q0Qsd0RBd0NDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IGpzb24sIGxvZ2dpbmcgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvY29yZSc7XG5pbXBvcnQge1xuICBBc3NldFBhdHRlcm5DbGFzcyxcbiAgU2NoZW1hIGFzIEJyb3dzZXJCdWlsZGVyU2NoZW1hLFxuICBTb3VyY2VNYXBDbGFzcyxcbn0gZnJvbSAnLi4vYnVpbGRlcnMvYnJvd3Nlci9zY2hlbWEnO1xuaW1wb3J0IHsgQnVpbGRPcHRpb25zIH0gZnJvbSAnLi9idWlsZC1vcHRpb25zJztcbmltcG9ydCB7IG5vcm1hbGl6ZUFzc2V0UGF0dGVybnMgfSBmcm9tICcuL25vcm1hbGl6ZS1hc3NldC1wYXR0ZXJucyc7XG5pbXBvcnQgeyBub3JtYWxpemVDYWNoZU9wdGlvbnMgfSBmcm9tICcuL25vcm1hbGl6ZS1jYWNoZSc7XG5pbXBvcnQge1xuICBOb3JtYWxpemVkRmlsZVJlcGxhY2VtZW50LFxuICBub3JtYWxpemVGaWxlUmVwbGFjZW1lbnRzLFxufSBmcm9tICcuL25vcm1hbGl6ZS1maWxlLXJlcGxhY2VtZW50cyc7XG5pbXBvcnQgeyBOb3JtYWxpemVkT3B0aW1pemF0aW9uT3B0aW9ucywgbm9ybWFsaXplT3B0aW1pemF0aW9uIH0gZnJvbSAnLi9ub3JtYWxpemUtb3B0aW1pemF0aW9uJztcbmltcG9ydCB7IG5vcm1hbGl6ZVNvdXJjZU1hcHMgfSBmcm9tICcuL25vcm1hbGl6ZS1zb3VyY2UtbWFwcyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0ZWRCcm93c2VycyB9IGZyb20gJy4vc3VwcG9ydGVkLWJyb3dzZXJzJztcblxuLyoqXG4gKiBBIG5vcm1hbGl6ZWQgYnJvd3NlciBidWlsZGVyIHNjaGVtYS5cbiAqL1xuZXhwb3J0IHR5cGUgTm9ybWFsaXplZEJyb3dzZXJCdWlsZGVyU2NoZW1hID0gQnJvd3NlckJ1aWxkZXJTY2hlbWEgJlxuICBCdWlsZE9wdGlvbnMgJiB7XG4gICAgc291cmNlTWFwOiBTb3VyY2VNYXBDbGFzcztcbiAgICBhc3NldHM6IEFzc2V0UGF0dGVybkNsYXNzW107XG4gICAgZmlsZVJlcGxhY2VtZW50czogTm9ybWFsaXplZEZpbGVSZXBsYWNlbWVudFtdO1xuICAgIG9wdGltaXphdGlvbjogTm9ybWFsaXplZE9wdGltaXphdGlvbk9wdGlvbnM7XG4gIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVCcm93c2VyU2NoZW1hKFxuICB3b3Jrc3BhY2VSb290OiBzdHJpbmcsXG4gIHByb2plY3RSb290OiBzdHJpbmcsXG4gIHByb2plY3RTb3VyY2VSb290OiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIG9wdGlvbnM6IEJyb3dzZXJCdWlsZGVyU2NoZW1hLFxuICBtZXRhZGF0YToganNvbi5Kc29uT2JqZWN0LFxuICBsb2dnZXI6IGxvZ2dpbmcuTG9nZ2VyQXBpLFxuKTogTm9ybWFsaXplZEJyb3dzZXJCdWlsZGVyU2NoZW1hIHtcbiAgY29uc3Qgbm9ybWFsaXplZFNvdXJjZU1hcE9wdGlvbnMgPSBub3JtYWxpemVTb3VyY2VNYXBzKG9wdGlvbnMuc291cmNlTWFwIHx8IGZhbHNlKTtcblxuICByZXR1cm4ge1xuICAgIC4uLm9wdGlvbnMsXG4gICAgY2FjaGU6IG5vcm1hbGl6ZUNhY2hlT3B0aW9ucyhtZXRhZGF0YSwgd29ya3NwYWNlUm9vdCksXG4gICAgYXNzZXRzOiBub3JtYWxpemVBc3NldFBhdHRlcm5zKFxuICAgICAgb3B0aW9ucy5hc3NldHMgfHwgW10sXG4gICAgICB3b3Jrc3BhY2VSb290LFxuICAgICAgcHJvamVjdFJvb3QsXG4gICAgICBwcm9qZWN0U291cmNlUm9vdCxcbiAgICApLFxuICAgIGZpbGVSZXBsYWNlbWVudHM6IG5vcm1hbGl6ZUZpbGVSZXBsYWNlbWVudHMob3B0aW9ucy5maWxlUmVwbGFjZW1lbnRzIHx8IFtdLCB3b3Jrc3BhY2VSb290KSxcbiAgICBvcHRpbWl6YXRpb246IG5vcm1hbGl6ZU9wdGltaXphdGlvbihvcHRpb25zLm9wdGltaXphdGlvbiksXG4gICAgc291cmNlTWFwOiBub3JtYWxpemVkU291cmNlTWFwT3B0aW9ucyxcbiAgICBwcmVzZXJ2ZVN5bWxpbmtzOlxuICAgICAgb3B0aW9ucy5wcmVzZXJ2ZVN5bWxpbmtzID09PSB1bmRlZmluZWRcbiAgICAgICAgPyBwcm9jZXNzLmV4ZWNBcmd2LmluY2x1ZGVzKCctLXByZXNlcnZlLXN5bWxpbmtzJylcbiAgICAgICAgOiBvcHRpb25zLnByZXNlcnZlU3ltbGlua3MsXG4gICAgc3RhdHNKc29uOiBvcHRpb25zLnN0YXRzSnNvbiB8fCBmYWxzZSxcbiAgICBidWRnZXRzOiBvcHRpb25zLmJ1ZGdldHMgfHwgW10sXG4gICAgc2NyaXB0czogb3B0aW9ucy5zY3JpcHRzIHx8IFtdLFxuICAgIHN0eWxlczogb3B0aW9ucy5zdHlsZXMgfHwgW10sXG4gICAgc3R5bGVQcmVwcm9jZXNzb3JPcHRpb25zOiB7XG4gICAgICBpbmNsdWRlUGF0aHM6XG4gICAgICAgIChvcHRpb25zLnN0eWxlUHJlcHJvY2Vzc29yT3B0aW9ucyAmJiBvcHRpb25zLnN0eWxlUHJlcHJvY2Vzc29yT3B0aW9ucy5pbmNsdWRlUGF0aHMpIHx8IFtdLFxuICAgIH0sXG4gICAgLy8gVXNpbmcganVzdCBgLS1wb2xsYCB3aWxsIHJlc3VsdCBpbiBhIHZhbHVlIG9mIDAgd2hpY2ggaXMgdmVyeSBsaWtlbHkgbm90IHRoZSBpbnRlbnRpb25cbiAgICAvLyBBIHZhbHVlIG9mIDAgaXMgZmFsc3kgYW5kIHdpbGwgZGlzYWJsZSBwb2xsaW5nIHJhdGhlciB0aGVuIGVuYWJsZVxuICAgIC8vIDUwMCBtcyBpcyBhIHNlbnNpYmxlIGRlZmF1bHQgaW4gdGhpcyBjYXNlXG4gICAgcG9sbDogb3B0aW9ucy5wb2xsID09PSAwID8gNTAwIDogb3B0aW9ucy5wb2xsLFxuICAgIHN1cHBvcnRlZEJyb3dzZXJzOiBnZXRTdXBwb3J0ZWRCcm93c2Vycyhwcm9qZWN0Um9vdCwgbG9nZ2VyKSxcbiAgfTtcbn1cbiJdfQ==