"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeBrowserSchema = void 0;
const core_1 = require("@angular-devkit/core");
const normalize_asset_patterns_1 = require("./normalize-asset-patterns");
const normalize_cache_1 = require("./normalize-cache");
const normalize_file_replacements_1 = require("./normalize-file-replacements");
const normalize_optimization_1 = require("./normalize-optimization");
const normalize_source_maps_1 = require("./normalize-source-maps");
const supported_browsers_1 = require("./supported-browsers");
function normalizeBrowserSchema(workspaceRoot, projectRoot, projectSourceRoot, options, metadata) {
    const normalizedSourceMapOptions = (0, normalize_source_maps_1.normalizeSourceMaps)(options.sourceMap || false);
    return {
        ...options,
        cache: (0, normalize_cache_1.normalizeCacheOptions)(metadata, workspaceRoot),
        assets: (0, normalize_asset_patterns_1.normalizeAssetPatterns)(options.assets || [], (0, core_1.normalize)(workspaceRoot), (0, core_1.normalize)(projectRoot), projectSourceRoot ? (0, core_1.normalize)(projectSourceRoot) : undefined),
        fileReplacements: (0, normalize_file_replacements_1.normalizeFileReplacements)(options.fileReplacements || [], (0, core_1.normalize)(workspaceRoot)),
        optimization: (0, normalize_optimization_1.normalizeOptimization)(options.optimization),
        sourceMap: normalizedSourceMapOptions,
        preserveSymlinks: options.preserveSymlinks === undefined
            ? process.execArgv.includes('--preserve-symlinks')
            : options.preserveSymlinks,
        statsJson: options.statsJson || false,
        budgets: options.budgets || [],
        scripts: options.scripts || [],
        styles: options.styles || [],
        stylePreprocessorOptions: {
            includePaths: (options.stylePreprocessorOptions && options.stylePreprocessorOptions.includePaths) || [],
        },
        // Using just `--poll` will result in a value of 0 which is very likely not the intention
        // A value of 0 is falsy and will disable polling rather then enable
        // 500 ms is a sensible default in this case
        poll: options.poll === 0 ? 500 : options.poll,
        supportedBrowsers: (0, supported_browsers_1.getSupportedBrowsers)(projectRoot),
    };
}
exports.normalizeBrowserSchema = normalizeBrowserSchema;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFsaXplLWJ1aWxkZXItc2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhcl9kZXZraXQvYnVpbGRfYW5ndWxhci9zcmMvdXRpbHMvbm9ybWFsaXplLWJ1aWxkZXItc2NoZW1hLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7OztBQUVILCtDQUF1RDtBQU92RCx5RUFBb0U7QUFDcEUsdURBQTBEO0FBQzFELCtFQUd1QztBQUN2QyxxRUFBZ0c7QUFDaEcsbUVBQThEO0FBQzlELDZEQUE0RDtBQWE1RCxTQUFnQixzQkFBc0IsQ0FDcEMsYUFBcUIsRUFDckIsV0FBbUIsRUFDbkIsaUJBQXFDLEVBQ3JDLE9BQTZCLEVBQzdCLFFBQXlCO0lBRXpCLE1BQU0sMEJBQTBCLEdBQUcsSUFBQSwyQ0FBbUIsRUFBQyxPQUFPLENBQUMsU0FBUyxJQUFJLEtBQUssQ0FBQyxDQUFDO0lBRW5GLE9BQU87UUFDTCxHQUFHLE9BQU87UUFDVixLQUFLLEVBQUUsSUFBQSx1Q0FBcUIsRUFBQyxRQUFRLEVBQUUsYUFBYSxDQUFDO1FBQ3JELE1BQU0sRUFBRSxJQUFBLGlEQUFzQixFQUM1QixPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUUsRUFDcEIsSUFBQSxnQkFBUyxFQUFDLGFBQWEsQ0FBQyxFQUN4QixJQUFBLGdCQUFTLEVBQUMsV0FBVyxDQUFDLEVBQ3RCLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxJQUFBLGdCQUFTLEVBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUM3RDtRQUNELGdCQUFnQixFQUFFLElBQUEsdURBQXlCLEVBQ3pDLE9BQU8sQ0FBQyxnQkFBZ0IsSUFBSSxFQUFFLEVBQzlCLElBQUEsZ0JBQVMsRUFBQyxhQUFhLENBQUMsQ0FDekI7UUFDRCxZQUFZLEVBQUUsSUFBQSw4Q0FBcUIsRUFBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQ3pELFNBQVMsRUFBRSwwQkFBMEI7UUFDckMsZ0JBQWdCLEVBQ2QsT0FBTyxDQUFDLGdCQUFnQixLQUFLLFNBQVM7WUFDcEMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDO1lBQ2xELENBQUMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCO1FBQzlCLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUyxJQUFJLEtBQUs7UUFDckMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLElBQUksRUFBRTtRQUM5QixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sSUFBSSxFQUFFO1FBQzlCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUU7UUFDNUIsd0JBQXdCLEVBQUU7WUFDeEIsWUFBWSxFQUNWLENBQUMsT0FBTyxDQUFDLHdCQUF3QixJQUFJLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFO1NBQzVGO1FBQ0QseUZBQXlGO1FBQ3pGLG9FQUFvRTtRQUNwRSw0Q0FBNEM7UUFDNUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJO1FBQzdDLGlCQUFpQixFQUFFLElBQUEseUNBQW9CLEVBQUMsV0FBVyxDQUFDO0tBQ3JELENBQUM7QUFDSixDQUFDO0FBMUNELHdEQTBDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyBqc29uLCBub3JtYWxpemUgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvY29yZSc7XG5pbXBvcnQge1xuICBBc3NldFBhdHRlcm5DbGFzcyxcbiAgU2NoZW1hIGFzIEJyb3dzZXJCdWlsZGVyU2NoZW1hLFxuICBTb3VyY2VNYXBDbGFzcyxcbn0gZnJvbSAnLi4vYnVpbGRlcnMvYnJvd3Nlci9zY2hlbWEnO1xuaW1wb3J0IHsgQnVpbGRPcHRpb25zIH0gZnJvbSAnLi9idWlsZC1vcHRpb25zJztcbmltcG9ydCB7IG5vcm1hbGl6ZUFzc2V0UGF0dGVybnMgfSBmcm9tICcuL25vcm1hbGl6ZS1hc3NldC1wYXR0ZXJucyc7XG5pbXBvcnQgeyBub3JtYWxpemVDYWNoZU9wdGlvbnMgfSBmcm9tICcuL25vcm1hbGl6ZS1jYWNoZSc7XG5pbXBvcnQge1xuICBOb3JtYWxpemVkRmlsZVJlcGxhY2VtZW50LFxuICBub3JtYWxpemVGaWxlUmVwbGFjZW1lbnRzLFxufSBmcm9tICcuL25vcm1hbGl6ZS1maWxlLXJlcGxhY2VtZW50cyc7XG5pbXBvcnQgeyBOb3JtYWxpemVkT3B0aW1pemF0aW9uT3B0aW9ucywgbm9ybWFsaXplT3B0aW1pemF0aW9uIH0gZnJvbSAnLi9ub3JtYWxpemUtb3B0aW1pemF0aW9uJztcbmltcG9ydCB7IG5vcm1hbGl6ZVNvdXJjZU1hcHMgfSBmcm9tICcuL25vcm1hbGl6ZS1zb3VyY2UtbWFwcyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0ZWRCcm93c2VycyB9IGZyb20gJy4vc3VwcG9ydGVkLWJyb3dzZXJzJztcblxuLyoqXG4gKiBBIG5vcm1hbGl6ZWQgYnJvd3NlciBidWlsZGVyIHNjaGVtYS5cbiAqL1xuZXhwb3J0IHR5cGUgTm9ybWFsaXplZEJyb3dzZXJCdWlsZGVyU2NoZW1hID0gQnJvd3NlckJ1aWxkZXJTY2hlbWEgJlxuICBCdWlsZE9wdGlvbnMgJiB7XG4gICAgc291cmNlTWFwOiBTb3VyY2VNYXBDbGFzcztcbiAgICBhc3NldHM6IEFzc2V0UGF0dGVybkNsYXNzW107XG4gICAgZmlsZVJlcGxhY2VtZW50czogTm9ybWFsaXplZEZpbGVSZXBsYWNlbWVudFtdO1xuICAgIG9wdGltaXphdGlvbjogTm9ybWFsaXplZE9wdGltaXphdGlvbk9wdGlvbnM7XG4gIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVCcm93c2VyU2NoZW1hKFxuICB3b3Jrc3BhY2VSb290OiBzdHJpbmcsXG4gIHByb2plY3RSb290OiBzdHJpbmcsXG4gIHByb2plY3RTb3VyY2VSb290OiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIG9wdGlvbnM6IEJyb3dzZXJCdWlsZGVyU2NoZW1hLFxuICBtZXRhZGF0YToganNvbi5Kc29uT2JqZWN0LFxuKTogTm9ybWFsaXplZEJyb3dzZXJCdWlsZGVyU2NoZW1hIHtcbiAgY29uc3Qgbm9ybWFsaXplZFNvdXJjZU1hcE9wdGlvbnMgPSBub3JtYWxpemVTb3VyY2VNYXBzKG9wdGlvbnMuc291cmNlTWFwIHx8IGZhbHNlKTtcblxuICByZXR1cm4ge1xuICAgIC4uLm9wdGlvbnMsXG4gICAgY2FjaGU6IG5vcm1hbGl6ZUNhY2hlT3B0aW9ucyhtZXRhZGF0YSwgd29ya3NwYWNlUm9vdCksXG4gICAgYXNzZXRzOiBub3JtYWxpemVBc3NldFBhdHRlcm5zKFxuICAgICAgb3B0aW9ucy5hc3NldHMgfHwgW10sXG4gICAgICBub3JtYWxpemUod29ya3NwYWNlUm9vdCksXG4gICAgICBub3JtYWxpemUocHJvamVjdFJvb3QpLFxuICAgICAgcHJvamVjdFNvdXJjZVJvb3QgPyBub3JtYWxpemUocHJvamVjdFNvdXJjZVJvb3QpIDogdW5kZWZpbmVkLFxuICAgICksXG4gICAgZmlsZVJlcGxhY2VtZW50czogbm9ybWFsaXplRmlsZVJlcGxhY2VtZW50cyhcbiAgICAgIG9wdGlvbnMuZmlsZVJlcGxhY2VtZW50cyB8fCBbXSxcbiAgICAgIG5vcm1hbGl6ZSh3b3Jrc3BhY2VSb290KSxcbiAgICApLFxuICAgIG9wdGltaXphdGlvbjogbm9ybWFsaXplT3B0aW1pemF0aW9uKG9wdGlvbnMub3B0aW1pemF0aW9uKSxcbiAgICBzb3VyY2VNYXA6IG5vcm1hbGl6ZWRTb3VyY2VNYXBPcHRpb25zLFxuICAgIHByZXNlcnZlU3ltbGlua3M6XG4gICAgICBvcHRpb25zLnByZXNlcnZlU3ltbGlua3MgPT09IHVuZGVmaW5lZFxuICAgICAgICA/IHByb2Nlc3MuZXhlY0FyZ3YuaW5jbHVkZXMoJy0tcHJlc2VydmUtc3ltbGlua3MnKVxuICAgICAgICA6IG9wdGlvbnMucHJlc2VydmVTeW1saW5rcyxcbiAgICBzdGF0c0pzb246IG9wdGlvbnMuc3RhdHNKc29uIHx8IGZhbHNlLFxuICAgIGJ1ZGdldHM6IG9wdGlvbnMuYnVkZ2V0cyB8fCBbXSxcbiAgICBzY3JpcHRzOiBvcHRpb25zLnNjcmlwdHMgfHwgW10sXG4gICAgc3R5bGVzOiBvcHRpb25zLnN0eWxlcyB8fCBbXSxcbiAgICBzdHlsZVByZXByb2Nlc3Nvck9wdGlvbnM6IHtcbiAgICAgIGluY2x1ZGVQYXRoczpcbiAgICAgICAgKG9wdGlvbnMuc3R5bGVQcmVwcm9jZXNzb3JPcHRpb25zICYmIG9wdGlvbnMuc3R5bGVQcmVwcm9jZXNzb3JPcHRpb25zLmluY2x1ZGVQYXRocykgfHwgW10sXG4gICAgfSxcbiAgICAvLyBVc2luZyBqdXN0IGAtLXBvbGxgIHdpbGwgcmVzdWx0IGluIGEgdmFsdWUgb2YgMCB3aGljaCBpcyB2ZXJ5IGxpa2VseSBub3QgdGhlIGludGVudGlvblxuICAgIC8vIEEgdmFsdWUgb2YgMCBpcyBmYWxzeSBhbmQgd2lsbCBkaXNhYmxlIHBvbGxpbmcgcmF0aGVyIHRoZW4gZW5hYmxlXG4gICAgLy8gNTAwIG1zIGlzIGEgc2Vuc2libGUgZGVmYXVsdCBpbiB0aGlzIGNhc2VcbiAgICBwb2xsOiBvcHRpb25zLnBvbGwgPT09IDAgPyA1MDAgOiBvcHRpb25zLnBvbGwsXG4gICAgc3VwcG9ydGVkQnJvd3NlcnM6IGdldFN1cHBvcnRlZEJyb3dzZXJzKHByb2plY3RSb290KSxcbiAgfTtcbn1cbiJdfQ==