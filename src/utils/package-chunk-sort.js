"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateEntryPoints = void 0;
const helpers_1 = require("../webpack/utils/helpers");
function generateEntryPoints(options) {
    // Add all styles/scripts, except lazy-loaded ones.
    const extraEntryPoints = (extraEntryPoints, defaultBundleName) => {
        const entryPoints = (0, helpers_1.normalizeExtraEntryPoints)(extraEntryPoints, defaultBundleName)
            .filter((entry) => entry.inject)
            .map((entry) => entry.bundleName);
        // remove duplicates
        return [...new Set(entryPoints)].map((f) => [f, false]);
    };
    const entryPoints = [
        ['runtime', !options.isHMREnabled],
        ['polyfills', true],
        ...extraEntryPoints(options.styles, 'styles'),
        ...extraEntryPoints(options.scripts, 'scripts'),
        ['vendor', true],
        ['main', true],
    ];
    const duplicates = entryPoints.filter(([name]) => entryPoints[0].indexOf(name) !== entryPoints[0].lastIndexOf(name));
    if (duplicates.length > 0) {
        throw new Error(`Multiple bundles have been named the same: '${duplicates.join(`', '`)}'.`);
    }
    return entryPoints;
}
exports.generateEntryPoints = generateEntryPoints;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFja2FnZS1jaHVuay1zb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhcl9kZXZraXQvYnVpbGRfYW5ndWxhci9zcmMvdXRpbHMvcGFja2FnZS1jaHVuay1zb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7OztBQUdILHNEQUFxRTtBQUlyRSxTQUFnQixtQkFBbUIsQ0FBQyxPQUluQztJQUNDLG1EQUFtRDtJQUNuRCxNQUFNLGdCQUFnQixHQUFHLENBQUMsZ0JBQW1DLEVBQUUsaUJBQXlCLEVBQUUsRUFBRTtRQUMxRixNQUFNLFdBQVcsR0FBRyxJQUFBLG1DQUF5QixFQUFDLGdCQUFnQixFQUFFLGlCQUFpQixDQUFDO2FBQy9FLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQzthQUMvQixHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVwQyxvQkFBb0I7UUFDcEIsT0FBTyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQWtCLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzNFLENBQUMsQ0FBQztJQUVGLE1BQU0sV0FBVyxHQUFzQjtRQUNyQyxDQUFDLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7UUFDbEMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDO1FBQ25CLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUM7UUFDN0MsR0FBRyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQztRQUMvQyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUM7UUFDaEIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDO0tBQ2YsQ0FBQztJQUVGLE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQ25DLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUM5RSxDQUFDO0lBRUYsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM3RjtJQUVELE9BQU8sV0FBVyxDQUFDO0FBQ3JCLENBQUM7QUFqQ0Qsa0RBaUNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IEV4dHJhRW50cnlQb2ludCB9IGZyb20gJy4uL2J1aWxkZXJzL2Jyb3dzZXIvc2NoZW1hJztcbmltcG9ydCB7IG5vcm1hbGl6ZUV4dHJhRW50cnlQb2ludHMgfSBmcm9tICcuLi93ZWJwYWNrL3V0aWxzL2hlbHBlcnMnO1xuXG5leHBvcnQgdHlwZSBFbnRyeVBvaW50c1R5cGUgPSBbbmFtZTogc3RyaW5nLCBpc01vZHVsZTogYm9vbGVhbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUVudHJ5UG9pbnRzKG9wdGlvbnM6IHtcbiAgc3R5bGVzOiBFeHRyYUVudHJ5UG9pbnRbXTtcbiAgc2NyaXB0czogRXh0cmFFbnRyeVBvaW50W107XG4gIGlzSE1SRW5hYmxlZD86IGJvb2xlYW47XG59KTogRW50cnlQb2ludHNUeXBlW10ge1xuICAvLyBBZGQgYWxsIHN0eWxlcy9zY3JpcHRzLCBleGNlcHQgbGF6eS1sb2FkZWQgb25lcy5cbiAgY29uc3QgZXh0cmFFbnRyeVBvaW50cyA9IChleHRyYUVudHJ5UG9pbnRzOiBFeHRyYUVudHJ5UG9pbnRbXSwgZGVmYXVsdEJ1bmRsZU5hbWU6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IGVudHJ5UG9pbnRzID0gbm9ybWFsaXplRXh0cmFFbnRyeVBvaW50cyhleHRyYUVudHJ5UG9pbnRzLCBkZWZhdWx0QnVuZGxlTmFtZSlcbiAgICAgIC5maWx0ZXIoKGVudHJ5KSA9PiBlbnRyeS5pbmplY3QpXG4gICAgICAubWFwKChlbnRyeSkgPT4gZW50cnkuYnVuZGxlTmFtZSk7XG5cbiAgICAvLyByZW1vdmUgZHVwbGljYXRlc1xuICAgIHJldHVybiBbLi4ubmV3IFNldChlbnRyeVBvaW50cyldLm1hcDxFbnRyeVBvaW50c1R5cGU+KChmKSA9PiBbZiwgZmFsc2VdKTtcbiAgfTtcblxuICBjb25zdCBlbnRyeVBvaW50czogRW50cnlQb2ludHNUeXBlW10gPSBbXG4gICAgWydydW50aW1lJywgIW9wdGlvbnMuaXNITVJFbmFibGVkXSxcbiAgICBbJ3BvbHlmaWxscycsIHRydWVdLFxuICAgIC4uLmV4dHJhRW50cnlQb2ludHMob3B0aW9ucy5zdHlsZXMsICdzdHlsZXMnKSxcbiAgICAuLi5leHRyYUVudHJ5UG9pbnRzKG9wdGlvbnMuc2NyaXB0cywgJ3NjcmlwdHMnKSxcbiAgICBbJ3ZlbmRvcicsIHRydWVdLFxuICAgIFsnbWFpbicsIHRydWVdLFxuICBdO1xuXG4gIGNvbnN0IGR1cGxpY2F0ZXMgPSBlbnRyeVBvaW50cy5maWx0ZXIoXG4gICAgKFtuYW1lXSkgPT4gZW50cnlQb2ludHNbMF0uaW5kZXhPZihuYW1lKSAhPT0gZW50cnlQb2ludHNbMF0ubGFzdEluZGV4T2YobmFtZSksXG4gICk7XG5cbiAgaWYgKGR1cGxpY2F0ZXMubGVuZ3RoID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTXVsdGlwbGUgYnVuZGxlcyBoYXZlIGJlZW4gbmFtZWQgdGhlIHNhbWU6ICcke2R1cGxpY2F0ZXMuam9pbihgJywgJ2ApfScuYCk7XG4gIH1cblxuICByZXR1cm4gZW50cnlQb2ludHM7XG59XG4iXX0=