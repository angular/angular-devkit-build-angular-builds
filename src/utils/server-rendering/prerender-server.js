"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.startServer = void 0;
const mrmime_1 = require("mrmime");
const promises_1 = require("node:fs/promises");
const node_http_1 = require("node:http");
const node_path_1 = require("node:path");
/**
 * Start a server that can handle HTTP requests to assets.
 *
 * @example
 * ```ts
 * httpClient.get('/assets/content.json');
 * ```
 * @returns the server address.
 */
async function startServer(assets) {
    if (Object.keys(assets).length === 0) {
        return {
            address: '',
        };
    }
    const assetsReversed = {};
    for (const { source, destination } of assets) {
        assetsReversed[addLeadingSlash(destination.replace(/\\/g, node_path_1.posix.sep))] = source;
    }
    const assetsCache = new Map();
    const server = (0, node_http_1.createServer)(requestHandler(assetsReversed, assetsCache));
    await new Promise((resolve) => {
        server.listen(0, '127.0.0.1', resolve);
    });
    const serverAddress = server.address();
    let address;
    if (!serverAddress) {
        address = '';
    }
    else if (typeof serverAddress === 'string') {
        address = serverAddress;
    }
    else {
        const { port, address: host } = serverAddress;
        address = `http://${host}:${port}`;
    }
    return {
        address,
        close: () => {
            assetsCache.clear();
            server.unref();
            server.close();
        },
    };
}
exports.startServer = startServer;
function requestHandler(assetsReversed, assetsCache) {
    return (req, res) => {
        if (!req.url) {
            res.destroy(new Error('Request url was empty.'));
            return;
        }
        const { pathname } = new URL(req.url, 'resolve://');
        const asset = assetsReversed[pathname];
        if (!asset) {
            res.statusCode = 404;
            res.statusMessage = 'Asset not found.';
            res.end();
            return;
        }
        const cachedAsset = assetsCache.get(pathname);
        if (cachedAsset) {
            const { content, mimeType } = cachedAsset;
            if (mimeType) {
                res.setHeader('Content-Type', mimeType);
            }
            res.end(content);
            return;
        }
        (0, promises_1.readFile)(asset)
            .then((content) => {
            const extension = (0, node_path_1.extname)(pathname);
            const mimeType = (0, mrmime_1.lookup)(extension);
            assetsCache.set(pathname, {
                mimeType,
                content,
            });
            if (mimeType) {
                res.setHeader('Content-Type', mimeType);
            }
            res.end(content);
        })
            .catch((e) => res.destroy(e));
    };
}
function addLeadingSlash(value) {
    return value.charAt(0) === '/' ? value : '/' + value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlcmVuZGVyLXNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2J1aWxkX2FuZ3VsYXIvc3JjL3V0aWxzL3NlcnZlci1yZW5kZXJpbmcvcHJlcmVuZGVyLXNlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOzs7QUFFSCxtQ0FBa0Q7QUFDbEQsK0NBQTRDO0FBQzVDLHlDQUEyRjtBQUMzRix5Q0FBMkM7QUFHM0M7Ozs7Ozs7O0dBUUc7QUFDSSxLQUFLLFVBQVUsV0FBVyxDQUFDLE1BQW9DO0lBSXBFLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3BDLE9BQU87WUFDTCxPQUFPLEVBQUUsRUFBRTtTQUNaLENBQUM7S0FDSDtJQUVELE1BQU0sY0FBYyxHQUEyQixFQUFFLENBQUM7SUFDbEQsS0FBSyxNQUFNLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxJQUFJLE1BQU0sRUFBRTtRQUM1QyxjQUFjLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLGlCQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztLQUNqRjtJQUVELE1BQU0sV0FBVyxHQUE4RCxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ3pGLE1BQU0sTUFBTSxHQUFHLElBQUEsd0JBQVksRUFBQyxjQUFjLENBQUMsY0FBYyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFFekUsTUFBTSxJQUFJLE9BQU8sQ0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQ2xDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6QyxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sYUFBYSxHQUFHLE1B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QUM7QUFDdkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyBsb29rdXAgYXMgbG9va3VwTWltZVR5cGUgfSBmcm9tICdtcm1pbWUnO1xuaW1wb3J0IHsgcmVhZEZpbGUgfSBmcm9tICdub2RlOmZzL3Byb21pc2VzJztcbmltcG9ydCB7IEluY29taW5nTWVzc2FnZSwgUmVxdWVzdExpc3RlbmVyLCBTZXJ2ZXJSZXNwb25zZSwgY3JlYXRlU2VydmVyIH0gZnJvbSAnbm9kZTpodHRwJztcbmltcG9ydCB7IGV4dG5hbWUsIHBvc2l4IH0gZnJvbSAnbm9kZTpwYXRoJztcbmltcG9ydCB7IEJ1aWxkT3V0cHV0QXNzZXQgfSBmcm9tICcuLi8uLi90b29scy9lc2J1aWxkL2J1bmRsZXItZXhlY3V0aW9uLXJlc3VsdCc7XG5cbi8qKlxuICogU3RhcnQgYSBzZXJ2ZXIgdGhhdCBjYW4gaGFuZGxlIEhUVFAgcmVxdWVzdHMgdG8gYXNzZXRzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaHR0cENsaWVudC5nZXQoJy9hc3NldHMvY29udGVudC5qc29uJyk7XG4gKiBgYGBcbiAqIEByZXR1cm5zIHRoZSBzZXJ2ZXIgYWRkcmVzcy5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0YXJ0U2VydmVyKGFzc2V0czogUmVhZG9ubHk8QnVpbGRPdXRwdXRBc3NldFtdPik6IFByb21pc2U8e1xuICBhZGRyZXNzOiBzdHJpbmc7XG4gIGNsb3NlPzogKCkgPT4gdm9pZDtcbn0+IHtcbiAgaWYgKE9iamVjdC5rZXlzKGFzc2V0cykubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFkZHJlc3M6ICcnLFxuICAgIH07XG4gIH1cblxuICBjb25zdCBhc3NldHNSZXZlcnNlZDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICBmb3IgKGNvbnN0IHsgc291cmNlLCBkZXN0aW5hdGlvbiB9IG9mIGFzc2V0cykge1xuICAgIGFzc2V0c1JldmVyc2VkW2FkZExlYWRpbmdTbGFzaChkZXN0aW5hdGlvbi5yZXBsYWNlKC9cXFxcL2csIHBvc2l4LnNlcCkpXSA9IHNvdXJjZTtcbiAgfVxuXG4gIGNvbnN0IGFzc2V0c0NhY2hlOiBNYXA8c3RyaW5nLCB7IG1pbWVUeXBlOiBzdHJpbmcgfCB2b2lkOyBjb250ZW50OiBCdWZmZXIgfT4gPSBuZXcgTWFwKCk7XG4gIGNvbnN0IHNlcnZlciA9IGNyZWF0ZVNlcnZlcihyZXF1ZXN0SGFuZGxlcihhc3NldHNSZXZlcnNlZCwgYXNzZXRzQ2FjaGUpKTtcblxuICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4ge1xuICAgIHNlcnZlci5saXN0ZW4oMCwgJzEyNy4wLjAuMScsIHJlc29sdmUpO1xuICB9KTtcblxuICBjb25zdCBzZXJ2ZXJBZGRyZXNzID0gc2VydmVyLmFkZHJlc3MoKTtcbiAgbGV0IGFkZHJlc3M6IHN0cmluZztcbiAgaWYgKCFzZXJ2ZXJBZGRyZXNzKSB7XG4gICAgYWRkcmVzcyA9ICcnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBzZXJ2ZXJBZGRyZXNzID09PSAnc3RyaW5nJykge1xuICAgIGFkZHJlc3MgPSBzZXJ2ZXJBZGRyZXNzO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHsgcG9ydCwgYWRkcmVzczogaG9zdCB9ID0gc2VydmVyQWRkcmVzcztcbiAgICBhZGRyZXNzID0gYGh0dHA6Ly8ke2hvc3R9OiR7cG9ydH1gO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhZGRyZXNzLFxuICAgIGNsb3NlOiAoKSA9PiB7XG4gICAgICBhc3NldHNDYWNoZS5jbGVhcigpO1xuICAgICAgc2VydmVyLnVucmVmKCk7XG4gICAgICBzZXJ2ZXIuY2xvc2UoKTtcbiAgICB9LFxuICB9O1xufVxuZnVuY3Rpb24gcmVxdWVzdEhhbmRsZXIoXG4gIGFzc2V0c1JldmVyc2VkOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxuICBhc3NldHNDYWNoZTogTWFwPHN0cmluZywgeyBtaW1lVHlwZTogc3RyaW5nIHwgdm9pZDsgY29udGVudDogQnVmZmVyIH0+LFxuKTogUmVxdWVzdExpc3RlbmVyPHR5cGVvZiBJbmNvbWluZ01lc3NhZ2UsIHR5cGVvZiBTZXJ2ZXJSZXNwb25zZT4ge1xuICByZXR1cm4gKHJlcSwgcmVzKSA9PiB7XG4gICAgaWYgKCFyZXEudXJsKSB7XG4gICAgICByZXMuZGVzdHJveShuZXcgRXJyb3IoJ1JlcXVlc3QgdXJsIHdhcyBlbXB0eS4nKSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IHBhdGhuYW1lIH0gPSBuZXcgVVJMKHJlcS51cmwsICdyZXNvbHZlOi8vJyk7XG4gICAgY29uc3QgYXNzZXQgPSBhc3NldHNSZXZlcnNlZFtwYXRobmFtZV07XG4gICAgaWYgKCFhc3NldCkge1xuICAgICAgcmVzLnN0YXR1c0NvZGUgPSA0MDQ7XG4gICAgICByZXMuc3RhdHVzTWVzc2FnZSA9ICdBc3NldCBub3QgZm91bmQuJztcbiAgICAgIHJlcy5lbmQoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNhY2hlZEFzc2V0ID0gYXNzZXRzQ2FjaGUuZ2V0KHBhdGhuYW1lKTtcbiAgICBpZiAoY2FjaGVkQXNzZXQpIHtcbiAgICAgIGNvbnN0IHsgY29udGVudCwgbWltZVR5cGUgfSA9IGNhY2hlZEFzc2V0O1xuICAgICAgaWYgKG1pbWVUeXBlKSB7XG4gICAgICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsIG1pbWVUeXBlKTtcbiAgICAgIH1cblxuICAgICAgcmVzLmVuZChjb250ZW50KTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJlYWRGaWxlKGFzc2V0KVxuICAgICAgLnRoZW4oKGNvbnRlbnQpID0+IHtcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9uID0gZXh0bmFtZShwYXRobmFtZSk7XG4gICAgICAgIGNvbnN0IG1pbWVUeXBlID0gbG9va3VwTWltZVR5cGUoZXh0ZW5zaW9uKTtcblxuICAgICAgICBhc3NldHNDYWNoZS5zZXQocGF0aG5hbWUsIHtcbiAgICAgICAgICBtaW1lVHlwZSxcbiAgICAgICAgICBjb250ZW50LFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobWltZVR5cGUpIHtcbiAgICAgICAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCBtaW1lVHlwZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXMuZW5kKGNvbnRlbnQpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4gcmVzLmRlc3Ryb3koZSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2godmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiB2YWx1ZS5jaGFyQXQoMCkgPT09ICcvJyA/IHZhbHVlIDogJy8nICsgdmFsdWU7XG59XG4iXX0=