"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildApplication = exports.buildApplicationInternal = void 0;
const architect_1 = require("@angular-devkit/architect");
const bundler_context_1 = require("../../tools/esbuild/bundler-context");
const purge_cache_1 = require("../../utils/purge-cache");
const version_1 = require("../../utils/version");
const build_action_1 = require("./build-action");
const execute_build_1 = require("./execute-build");
const options_1 = require("./options");
async function* buildApplicationInternal(options, 
// TODO: Integrate abort signal support into builder system
context, infrastructureSettings) {
    // Check Angular version.
    (0, version_1.assertCompatibleAngularVersion)(context.workspaceRoot);
    // Purge old build disk cache.
    await (0, purge_cache_1.purgeStaleBuildCache)(context);
    // Determine project name from builder context target
    const projectName = context.target?.project;
    if (!projectName) {
        context.logger.error(`The 'application' builder requires a target to be specified.`);
        return;
    }
    const normalizedOptions = await (0, options_1.normalizeOptions)(context, projectName, options);
    // Warn about SSR not yet supporting localize
    if (normalizedOptions.i18nOptions.shouldInline && normalizedOptions.ssrOptions) {
        context.logger.warn(`SSR is not yet supported with the 'localize' option and will be disabled for this build.`);
        normalizedOptions.ssrOptions = undefined;
    }
    yield* (0, build_action_1.runEsBuildBuildAction)((rebuildState) => (0, execute_build_1.executeBuild)(normalizedOptions, context, rebuildState), {
        watch: normalizedOptions.watch,
        poll: normalizedOptions.poll,
        deleteOutputPath: normalizedOptions.deleteOutputPath,
        cacheOptions: normalizedOptions.cacheOptions,
        outputPath: normalizedOptions.outputPath,
        verbose: normalizedOptions.verbose,
        projectRoot: normalizedOptions.projectRoot,
        workspaceRoot: normalizedOptions.workspaceRoot,
        progress: normalizedOptions.progress,
        writeToFileSystem: infrastructureSettings?.write,
        // For app-shell and SSG server files are not required by users.
        // Omit these when SSR is not enabled.
        writeToFileSystemFilter: normalizedOptions.ssrOptions && normalizedOptions.serverEntryPoint
            ? undefined
            : (file) => file.type !== bundler_context_1.BuildOutputFileType.Server,
        logger: context.logger,
        signal: context.signal,
    });
}
exports.buildApplicationInternal = buildApplicationInternal;
function buildApplication(options, context) {
    return buildApplicationInternal(options, context);
}
exports.buildApplication = buildApplication;
exports.default = (0, architect_1.createBuilder)(buildApplication);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9idWlsZF9hbmd1bGFyL3NyYy9idWlsZGVycy9hcHBsaWNhdGlvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOzs7QUFFSCx5REFBeUY7QUFDekYseUVBQTJGO0FBQzNGLHlEQUErRDtBQUMvRCxpREFBcUU7QUFDckUsaURBQXVEO0FBQ3ZELG1EQUErQztBQUMvQyx1Q0FBZ0Y7QUFHekUsS0FBSyxTQUFTLENBQUMsQ0FBQyx3QkFBd0IsQ0FDN0MsT0FBMEM7QUFDMUMsMkRBQTJEO0FBQzNELE9BQWtELEVBQ2xELHNCQUVDO0lBT0QseUJBQXlCO0lBQ3pCLElBQUEsd0NBQThCLEVBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRXRELDhCQUE4QjtJQUM5QixNQUFNLElBQUEsa0NBQW9CLEVBQUMsT0FBTyxDQUFDLENBQUM7SUFFcEMscURBQXFEO0lBQ3JELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDO0lBQzVDLElBQUksQ0FBQyxXQUFXLEVBQUU7UUFDaEIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsOERBQThELENBQUMsQ0FBQztRQUVyRixPQUFPO0tBQ1I7SUFFRCxNQUFNLGlCQUFpQixHQUFHLE1BQU0sSUFBQSwwQkFBZ0IsRUFBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRWhGLDZDQUE2QztJQUM3QyxJQUFJLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxZQUFZLElBQUksaUJBQWlCLENBQUMsVUFBVSxFQUFFO1FBQzlFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNqQiwwRkFBMEYsQ0FDM0YsQ0FBQztRQUNGLGlCQUFpQixDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7S0FDMUM7SUFFRCxLQUFLLENBQUMsQ0FBQyxJQUFBLG9DQUFxQixFQUMxQixDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsSUFBQSw0QkFBWSxFQUFDLGlCQUFpQixFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsRUFDeEU7UUFDRSxLQUFLLEVBQUUsaUJBQWlCLENBQUMsS0FBSztRQUM5QixJQUFJLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtRQUM1QixnQkFBZ0IsRUFBRSxpQkFBaUIsQ0FBQyxnQkFBZ0I7UUFDcEQsWUFBWSxFQUFFLGlCQUFpQixDQUFDLFlBQVk7UUFDNUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLFVBQVU7UUFDeEMsT0FBTyxFQUFFLGlCQUFpQixDQUFDLE9BQU87UUFDbEMsV0FBVyxFQUFFLGlCQUFpQixDQUFDLFdBQVc7UUFDMUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLGFBQWE7UUFDOUMsUUFBUSxFQUFFLGlCQUFpQixDQUFDLFFBQVE7UUFDcEMsaUJBQWlCLEVBQUUsc0JBQXNCLEVBQUUsS0FBSztRQUNoRCxnRUFBZ0U7UUFDaEUsc0NBQXNDO1FBQ3RDLHVCQUF1QixFQUNyQixpQkFBaUIsQ0FBQyxVQUFVLElBQUksaUJBQWlCLENBQUMsZ0JBQWdCO1lBQ2hFLENBQUMsQ0FBQyxTQUFTO1lBQ1gsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLHFDQUFtQixDQUFDLE1BQU07UUFDeEQsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO1FBQ3RCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtLQUN2QixDQUNGLENBQUM7QUFDSixDQUFDO0FBNURELDREQTREQztBQUVELFNBQWdCLGdCQUFnQixDQUM5QixPQUFrQyxFQUNsQyxPQUF1QjtJQU92QixPQUFPLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNwRCxDQUFDO0FBVkQsNENBVUM7QUFFRCxrQkFBZSxJQUFBLHlCQUFhLEVBQUMsZ0JBQWdCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyBCdWlsZGVyQ29udGV4dCwgQnVpbGRlck91dHB1dCwgY3JlYXRlQnVpbGRlciB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9hcmNoaXRlY3QnO1xuaW1wb3J0IHsgQnVpbGRPdXRwdXRGaWxlLCBCdWlsZE91dHB1dEZpbGVUeXBlIH0gZnJvbSAnLi4vLi4vdG9vbHMvZXNidWlsZC9idW5kbGVyLWNvbnRleHQnO1xuaW1wb3J0IHsgcHVyZ2VTdGFsZUJ1aWxkQ2FjaGUgfSBmcm9tICcuLi8uLi91dGlscy9wdXJnZS1jYWNoZSc7XG5pbXBvcnQgeyBhc3NlcnRDb21wYXRpYmxlQW5ndWxhclZlcnNpb24gfSBmcm9tICcuLi8uLi91dGlscy92ZXJzaW9uJztcbmltcG9ydCB7IHJ1bkVzQnVpbGRCdWlsZEFjdGlvbiB9IGZyb20gJy4vYnVpbGQtYWN0aW9uJztcbmltcG9ydCB7IGV4ZWN1dGVCdWlsZCB9IGZyb20gJy4vZXhlY3V0ZS1idWlsZCc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvbkJ1aWxkZXJJbnRlcm5hbE9wdGlvbnMsIG5vcm1hbGl6ZU9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMnO1xuaW1wb3J0IHsgU2NoZW1hIGFzIEFwcGxpY2F0aW9uQnVpbGRlck9wdGlvbnMgfSBmcm9tICcuL3NjaGVtYSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiogYnVpbGRBcHBsaWNhdGlvbkludGVybmFsKFxuICBvcHRpb25zOiBBcHBsaWNhdGlvbkJ1aWxkZXJJbnRlcm5hbE9wdGlvbnMsXG4gIC8vIFRPRE86IEludGVncmF0ZSBhYm9ydCBzaWduYWwgc3VwcG9ydCBpbnRvIGJ1aWxkZXIgc3lzdGVtXG4gIGNvbnRleHQ6IEJ1aWxkZXJDb250ZXh0ICYgeyBzaWduYWw/OiBBYm9ydFNpZ25hbCB9LFxuICBpbmZyYXN0cnVjdHVyZVNldHRpbmdzPzoge1xuICAgIHdyaXRlPzogYm9vbGVhbjtcbiAgfSxcbik6IEFzeW5jSXRlcmFibGU8XG4gIEJ1aWxkZXJPdXRwdXQgJiB7XG4gICAgb3V0cHV0RmlsZXM/OiBCdWlsZE91dHB1dEZpbGVbXTtcbiAgICBhc3NldEZpbGVzPzogeyBzb3VyY2U6IHN0cmluZzsgZGVzdGluYXRpb246IHN0cmluZyB9W107XG4gIH1cbj4ge1xuICAvLyBDaGVjayBBbmd1bGFyIHZlcnNpb24uXG4gIGFzc2VydENvbXBhdGlibGVBbmd1bGFyVmVyc2lvbihjb250ZXh0LndvcmtzcGFjZVJvb3QpO1xuXG4gIC8vIFB1cmdlIG9sZCBidWlsZCBkaXNrIGNhY2hlLlxuICBhd2FpdCBwdXJnZVN0YWxlQnVpbGRDYWNoZShjb250ZXh0KTtcblxuICAvLyBEZXRlcm1pbmUgcHJvamVjdCBuYW1lIGZyb20gYnVpbGRlciBjb250ZXh0IHRhcmdldFxuICBjb25zdCBwcm9qZWN0TmFtZSA9IGNvbnRleHQudGFyZ2V0Py5wcm9qZWN0O1xuICBpZiAoIXByb2plY3ROYW1lKSB7XG4gICAgY29udGV4dC5sb2dnZXIuZXJyb3IoYFRoZSAnYXBwbGljYXRpb24nIGJ1aWxkZXIgcmVxdWlyZXMgYSB0YXJnZXQgdG8gYmUgc3BlY2lmaWVkLmApO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgbm9ybWFsaXplZE9wdGlvbnMgPSBhd2FpdCBub3JtYWxpemVPcHRpb25zKGNvbnRleHQsIHByb2plY3ROYW1lLCBvcHRpb25zKTtcblxuICAvLyBXYXJuIGFib3V0IFNTUiBub3QgeWV0IHN1cHBvcnRpbmcgbG9jYWxpemVcbiAgaWYgKG5vcm1hbGl6ZWRPcHRpb25zLmkxOG5PcHRpb25zLnNob3VsZElubGluZSAmJiBub3JtYWxpemVkT3B0aW9ucy5zc3JPcHRpb25zKSB7XG4gICAgY29udGV4dC5sb2dnZXIud2FybihcbiAgICAgIGBTU1IgaXMgbm90IHlldCBzdXBwb3J0ZWQgd2l0aCB0aGUgJ2xvY2FsaXplJyBvcHRpb24gYW5kIHdpbGwgYmUgZGlzYWJsZWQgZm9yIHRoaXMgYnVpbGQuYCxcbiAgICApO1xuICAgIG5vcm1hbGl6ZWRPcHRpb25zLnNzck9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIH1cblxuICB5aWVsZCogcnVuRXNCdWlsZEJ1aWxkQWN0aW9uKFxuICAgIChyZWJ1aWxkU3RhdGUpID0+IGV4ZWN1dGVCdWlsZChub3JtYWxpemVkT3B0aW9ucywgY29udGV4dCwgcmVidWlsZFN0YXRlKSxcbiAgICB7XG4gICAgICB3YXRjaDogbm9ybWFsaXplZE9wdGlvbnMud2F0Y2gsXG4gICAgICBwb2xsOiBub3JtYWxpemVkT3B0aW9ucy5wb2xsLFxuICAgICAgZGVsZXRlT3V0cHV0UGF0aDogbm9ybWFsaXplZE9wdGlvbnMuZGVsZXRlT3V0cHV0UGF0aCxcbiAgICAgIGNhY2hlT3B0aW9uczogbm9ybWFsaXplZE9wdGlvbnMuY2FjaGVPcHRpb25zLFxuICAgICAgb3V0cHV0UGF0aDogbm9ybWFsaXplZE9wdGlvbnMub3V0cHV0UGF0aCxcbiAgICAgIHZlcmJvc2U6IG5vcm1hbGl6ZWRPcHRpb25zLnZlcmJvc2UsXG4gICAgICBwcm9qZWN0Um9vdDogbm9ybWFsaXplZE9wdGlvbnMucHJvamVjdFJvb3QsXG4gICAgICB3b3Jrc3BhY2VSb290OiBub3JtYWxpemVkT3B0aW9ucy53b3Jrc3BhY2VSb290LFxuICAgICAgcHJvZ3Jlc3M6IG5vcm1hbGl6ZWRPcHRpb25zLnByb2dyZXNzLFxuICAgICAgd3JpdGVUb0ZpbGVTeXN0ZW06IGluZnJhc3RydWN0dXJlU2V0dGluZ3M/LndyaXRlLFxuICAgICAgLy8gRm9yIGFwcC1zaGVsbCBhbmQgU1NHIHNlcnZlciBmaWxlcyBhcmUgbm90IHJlcXVpcmVkIGJ5IHVzZXJzLlxuICAgICAgLy8gT21pdCB0aGVzZSB3aGVuIFNTUiBpcyBub3QgZW5hYmxlZC5cbiAgICAgIHdyaXRlVG9GaWxlU3lzdGVtRmlsdGVyOlxuICAgICAgICBub3JtYWxpemVkT3B0aW9ucy5zc3JPcHRpb25zICYmIG5vcm1hbGl6ZWRPcHRpb25zLnNlcnZlckVudHJ5UG9pbnRcbiAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgIDogKGZpbGUpID0+IGZpbGUudHlwZSAhPT0gQnVpbGRPdXRwdXRGaWxlVHlwZS5TZXJ2ZXIsXG4gICAgICBsb2dnZXI6IGNvbnRleHQubG9nZ2VyLFxuICAgICAgc2lnbmFsOiBjb250ZXh0LnNpZ25hbCxcbiAgICB9LFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRBcHBsaWNhdGlvbihcbiAgb3B0aW9uczogQXBwbGljYXRpb25CdWlsZGVyT3B0aW9ucyxcbiAgY29udGV4dDogQnVpbGRlckNvbnRleHQsXG4pOiBBc3luY0l0ZXJhYmxlPFxuICBCdWlsZGVyT3V0cHV0ICYge1xuICAgIG91dHB1dEZpbGVzPzogQnVpbGRPdXRwdXRGaWxlW107XG4gICAgYXNzZXRGaWxlcz86IHsgc291cmNlOiBzdHJpbmc7IGRlc3RpbmF0aW9uOiBzdHJpbmcgfVtdO1xuICB9XG4+IHtcbiAgcmV0dXJuIGJ1aWxkQXBwbGljYXRpb25JbnRlcm5hbChvcHRpb25zLCBjb250ZXh0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQnVpbGRlcihidWlsZEFwcGxpY2F0aW9uKTtcbiJdfQ==