"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildApplication = exports.buildApplicationInternal = void 0;
const architect_1 = require("@angular-devkit/architect");
const purge_cache_1 = require("../../utils/purge-cache");
const version_1 = require("../../utils/version");
const build_action_1 = require("./build-action");
const execute_build_1 = require("./execute-build");
const options_1 = require("./options");
async function* buildApplicationInternal(options, 
// TODO: Integrate abort signal support into builder system
context, infrastructureSettings) {
    // Check Angular version.
    (0, version_1.assertCompatibleAngularVersion)(context.workspaceRoot);
    // Purge old build disk cache.
    await (0, purge_cache_1.purgeStaleBuildCache)(context);
    // Determine project name from builder context target
    const projectName = context.target?.project;
    if (!projectName) {
        context.logger.error(`The 'application' builder requires a target to be specified.`);
        return;
    }
    const normalizedOptions = await (0, options_1.normalizeOptions)(context, projectName, options);
    // Warn about prerender/ssr not yet supporting localize
    if (normalizedOptions.i18nOptions.shouldInline &&
        (normalizedOptions.prerenderOptions ||
            normalizedOptions.ssrOptions ||
            normalizedOptions.appShellOptions)) {
        context.logger.warn(`Prerendering, App Shell, and SSR are not yet supported with the 'localize' option and will be disabled for this build.`);
        normalizedOptions.prerenderOptions =
            normalizedOptions.ssrOptions =
                normalizedOptions.appShellOptions =
                    undefined;
    }
    yield* (0, build_action_1.runEsBuildBuildAction)((rebuildState) => (0, execute_build_1.executeBuild)(normalizedOptions, context, rebuildState), {
        watch: normalizedOptions.watch,
        poll: normalizedOptions.poll,
        deleteOutputPath: normalizedOptions.deleteOutputPath,
        cacheOptions: normalizedOptions.cacheOptions,
        outputPath: normalizedOptions.outputPath,
        verbose: normalizedOptions.verbose,
        projectRoot: normalizedOptions.projectRoot,
        workspaceRoot: normalizedOptions.workspaceRoot,
        progress: normalizedOptions.progress,
        writeToFileSystem: infrastructureSettings?.write,
        logger: context.logger,
        signal: context.signal,
    });
}
exports.buildApplicationInternal = buildApplicationInternal;
function buildApplication(options, context) {
    return buildApplicationInternal(options, context);
}
exports.buildApplication = buildApplication;
exports.default = (0, architect_1.createBuilder)(buildApplication);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9idWlsZF9hbmd1bGFyL3NyYy9idWlsZGVycy9hcHBsaWNhdGlvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOzs7QUFFSCx5REFBeUY7QUFFekYseURBQStEO0FBQy9ELGlEQUFxRTtBQUNyRSxpREFBdUQ7QUFDdkQsbURBQStDO0FBQy9DLHVDQUFnRjtBQUd6RSxLQUFLLFNBQVMsQ0FBQyxDQUFDLHdCQUF3QixDQUM3QyxPQUEwQztBQUMxQywyREFBMkQ7QUFDM0QsT0FBa0QsRUFDbEQsc0JBRUM7SUFPRCx5QkFBeUI7SUFDekIsSUFBQSx3Q0FBOEIsRUFBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFdEQsOEJBQThCO0lBQzlCLE1BQU0sSUFBQSxrQ0FBb0IsRUFBQyxPQUFPLENBQUMsQ0FBQztJQUVwQyxxREFBcUQ7SUFDckQsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUM7SUFDNUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUNoQixPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO1FBRXJGLE9BQU87S0FDUjtJQUVELE1BQU0saUJBQWlCLEdBQUcsTUFBTSxJQUFBLDBCQUFnQixFQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFaEYsdURBQXVEO0lBQ3ZELElBQ0UsaUJBQWlCLENBQUMsV0FBVyxDQUFDLFlBQVk7UUFDMUMsQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0I7WUFDakMsaUJBQWlCLENBQUMsVUFBVTtZQUM1QixpQkFBaUIsQ0FBQyxlQUFlLENBQUMsRUFDcEM7UUFDQSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDakIsd0hBQXdILENBQ3pILENBQUM7UUFDRixpQkFBaUIsQ0FBQyxnQkFBZ0I7WUFDaEMsaUJBQWlCLENBQUMsVUFBVTtnQkFDNUIsaUJBQWlCLENBQUMsZUFBZTtvQkFDL0IsU0FBUyxDQUFDO0tBQ2Y7SUFFRCxLQUFLLENBQUMsQ0FBQyxJQUFBLG9DQUFxQixFQUMxQixDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsSUFBQSw0QkFBWSxFQUFDLGlCQUFpQixFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsRUFDeEU7UUFDRSxLQUFLLEVBQUUsaUJBQWlCLENBQUMsS0FBSztRQUM5QixJQUFJLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtRQUM1QixnQkFBZ0IsRUFBRSxpQkFBaUIsQ0FBQyxnQkFBZ0I7UUFDcEQsWUFBWSxFQUFFLGlCQUFpQixDQUFDLFlBQVk7UUFDNUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLFVBQVU7UUFDeEMsT0FBTyxFQUFFLGlCQUFpQixDQUFDLE9BQU87UUFDbEMsV0FBVyxFQUFFLGlCQUFpQixDQUFDLFdBQVc7UUFDMUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLGFBQWE7UUFDOUMsUUFBUSxFQUFFLGlCQUFpQixDQUFDLFFBQVE7UUFDcEMsaUJBQWlCLEVBQUUsc0JBQXNCLEVBQUUsS0FBSztRQUNoRCxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07UUFDdEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO0tBQ3ZCLENBQ0YsQ0FBQztBQUNKLENBQUM7QUE5REQsNERBOERDO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQzlCLE9BQWtDLEVBQ2xDLE9BQXVCO0lBT3ZCLE9BQU8sd0JBQXdCLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3BELENBQUM7QUFWRCw0Q0FVQztBQUVELGtCQUFlLElBQUEseUJBQWEsRUFBQyxnQkFBZ0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IEJ1aWxkZXJDb250ZXh0LCBCdWlsZGVyT3V0cHV0LCBjcmVhdGVCdWlsZGVyIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2FyY2hpdGVjdCc7XG5pbXBvcnQgdHlwZSB7IE91dHB1dEZpbGUgfSBmcm9tICdlc2J1aWxkJztcbmltcG9ydCB7IHB1cmdlU3RhbGVCdWlsZENhY2hlIH0gZnJvbSAnLi4vLi4vdXRpbHMvcHVyZ2UtY2FjaGUnO1xuaW1wb3J0IHsgYXNzZXJ0Q29tcGF0aWJsZUFuZ3VsYXJWZXJzaW9uIH0gZnJvbSAnLi4vLi4vdXRpbHMvdmVyc2lvbic7XG5pbXBvcnQgeyBydW5Fc0J1aWxkQnVpbGRBY3Rpb24gfSBmcm9tICcuL2J1aWxkLWFjdGlvbic7XG5pbXBvcnQgeyBleGVjdXRlQnVpbGQgfSBmcm9tICcuL2V4ZWN1dGUtYnVpbGQnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25CdWlsZGVySW50ZXJuYWxPcHRpb25zLCBub3JtYWxpemVPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB7IFNjaGVtYSBhcyBBcHBsaWNhdGlvbkJ1aWxkZXJPcHRpb25zIH0gZnJvbSAnLi9zY2hlbWEnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24qIGJ1aWxkQXBwbGljYXRpb25JbnRlcm5hbChcbiAgb3B0aW9uczogQXBwbGljYXRpb25CdWlsZGVySW50ZXJuYWxPcHRpb25zLFxuICAvLyBUT0RPOiBJbnRlZ3JhdGUgYWJvcnQgc2lnbmFsIHN1cHBvcnQgaW50byBidWlsZGVyIHN5c3RlbVxuICBjb250ZXh0OiBCdWlsZGVyQ29udGV4dCAmIHsgc2lnbmFsPzogQWJvcnRTaWduYWwgfSxcbiAgaW5mcmFzdHJ1Y3R1cmVTZXR0aW5ncz86IHtcbiAgICB3cml0ZT86IGJvb2xlYW47XG4gIH0sXG4pOiBBc3luY0l0ZXJhYmxlPFxuICBCdWlsZGVyT3V0cHV0ICYge1xuICAgIG91dHB1dEZpbGVzPzogT3V0cHV0RmlsZVtdO1xuICAgIGFzc2V0RmlsZXM/OiB7IHNvdXJjZTogc3RyaW5nOyBkZXN0aW5hdGlvbjogc3RyaW5nIH1bXTtcbiAgfVxuPiB7XG4gIC8vIENoZWNrIEFuZ3VsYXIgdmVyc2lvbi5cbiAgYXNzZXJ0Q29tcGF0aWJsZUFuZ3VsYXJWZXJzaW9uKGNvbnRleHQud29ya3NwYWNlUm9vdCk7XG5cbiAgLy8gUHVyZ2Ugb2xkIGJ1aWxkIGRpc2sgY2FjaGUuXG4gIGF3YWl0IHB1cmdlU3RhbGVCdWlsZENhY2hlKGNvbnRleHQpO1xuXG4gIC8vIERldGVybWluZSBwcm9qZWN0IG5hbWUgZnJvbSBidWlsZGVyIGNvbnRleHQgdGFyZ2V0XG4gIGNvbnN0IHByb2plY3ROYW1lID0gY29udGV4dC50YXJnZXQ/LnByb2plY3Q7XG4gIGlmICghcHJvamVjdE5hbWUpIHtcbiAgICBjb250ZXh0LmxvZ2dlci5lcnJvcihgVGhlICdhcHBsaWNhdGlvbicgYnVpbGRlciByZXF1aXJlcyBhIHRhcmdldCB0byBiZSBzcGVjaWZpZWQuYCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBub3JtYWxpemVkT3B0aW9ucyA9IGF3YWl0IG5vcm1hbGl6ZU9wdGlvbnMoY29udGV4dCwgcHJvamVjdE5hbWUsIG9wdGlvbnMpO1xuXG4gIC8vIFdhcm4gYWJvdXQgcHJlcmVuZGVyL3NzciBub3QgeWV0IHN1cHBvcnRpbmcgbG9jYWxpemVcbiAgaWYgKFxuICAgIG5vcm1hbGl6ZWRPcHRpb25zLmkxOG5PcHRpb25zLnNob3VsZElubGluZSAmJlxuICAgIChub3JtYWxpemVkT3B0aW9ucy5wcmVyZW5kZXJPcHRpb25zIHx8XG4gICAgICBub3JtYWxpemVkT3B0aW9ucy5zc3JPcHRpb25zIHx8XG4gICAgICBub3JtYWxpemVkT3B0aW9ucy5hcHBTaGVsbE9wdGlvbnMpXG4gICkge1xuICAgIGNvbnRleHQubG9nZ2VyLndhcm4oXG4gICAgICBgUHJlcmVuZGVyaW5nLCBBcHAgU2hlbGwsIGFuZCBTU1IgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkIHdpdGggdGhlICdsb2NhbGl6ZScgb3B0aW9uIGFuZCB3aWxsIGJlIGRpc2FibGVkIGZvciB0aGlzIGJ1aWxkLmAsXG4gICAgKTtcbiAgICBub3JtYWxpemVkT3B0aW9ucy5wcmVyZW5kZXJPcHRpb25zID1cbiAgICAgIG5vcm1hbGl6ZWRPcHRpb25zLnNzck9wdGlvbnMgPVxuICAgICAgbm9ybWFsaXplZE9wdGlvbnMuYXBwU2hlbGxPcHRpb25zID1cbiAgICAgICAgdW5kZWZpbmVkO1xuICB9XG5cbiAgeWllbGQqIHJ1bkVzQnVpbGRCdWlsZEFjdGlvbihcbiAgICAocmVidWlsZFN0YXRlKSA9PiBleGVjdXRlQnVpbGQobm9ybWFsaXplZE9wdGlvbnMsIGNvbnRleHQsIHJlYnVpbGRTdGF0ZSksXG4gICAge1xuICAgICAgd2F0Y2g6IG5vcm1hbGl6ZWRPcHRpb25zLndhdGNoLFxuICAgICAgcG9sbDogbm9ybWFsaXplZE9wdGlvbnMucG9sbCxcbiAgICAgIGRlbGV0ZU91dHB1dFBhdGg6IG5vcm1hbGl6ZWRPcHRpb25zLmRlbGV0ZU91dHB1dFBhdGgsXG4gICAgICBjYWNoZU9wdGlvbnM6IG5vcm1hbGl6ZWRPcHRpb25zLmNhY2hlT3B0aW9ucyxcbiAgICAgIG91dHB1dFBhdGg6IG5vcm1hbGl6ZWRPcHRpb25zLm91dHB1dFBhdGgsXG4gICAgICB2ZXJib3NlOiBub3JtYWxpemVkT3B0aW9ucy52ZXJib3NlLFxuICAgICAgcHJvamVjdFJvb3Q6IG5vcm1hbGl6ZWRPcHRpb25zLnByb2plY3RSb290LFxuICAgICAgd29ya3NwYWNlUm9vdDogbm9ybWFsaXplZE9wdGlvbnMud29ya3NwYWNlUm9vdCxcbiAgICAgIHByb2dyZXNzOiBub3JtYWxpemVkT3B0aW9ucy5wcm9ncmVzcyxcbiAgICAgIHdyaXRlVG9GaWxlU3lzdGVtOiBpbmZyYXN0cnVjdHVyZVNldHRpbmdzPy53cml0ZSxcbiAgICAgIGxvZ2dlcjogY29udGV4dC5sb2dnZXIsXG4gICAgICBzaWduYWw6IGNvbnRleHQuc2lnbmFsLFxuICAgIH0sXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEFwcGxpY2F0aW9uKFxuICBvcHRpb25zOiBBcHBsaWNhdGlvbkJ1aWxkZXJPcHRpb25zLFxuICBjb250ZXh0OiBCdWlsZGVyQ29udGV4dCxcbik6IEFzeW5jSXRlcmFibGU8XG4gIEJ1aWxkZXJPdXRwdXQgJiB7XG4gICAgb3V0cHV0RmlsZXM/OiBPdXRwdXRGaWxlW107XG4gICAgYXNzZXRGaWxlcz86IHsgc291cmNlOiBzdHJpbmc7IGRlc3RpbmF0aW9uOiBzdHJpbmcgfVtdO1xuICB9XG4+IHtcbiAgcmV0dXJuIGJ1aWxkQXBwbGljYXRpb25JbnRlcm5hbChvcHRpb25zLCBjb250ZXh0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQnVpbGRlcihidWlsZEFwcGxpY2F0aW9uKTtcbiJdfQ==